# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
# ðŸ§ª Adastra Unit Tests
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

# Recherche rÃ©cursive de tous les fichiers .cpp de test
file(GLOB_RECURSE UNIT_TEST_SOURCES CONFIGURE_DEPENDS *.cpp)

# CrÃ©ation de l'exÃ©cutable unique
add_executable(adastra_unittests ${UNIT_TEST_SOURCES})

# Inclure les headers publics
target_include_directories(adastra_unittests PRIVATE
    ${CMAKE_SOURCE_DIR}/include
)

# Lier les bibliothÃ¨ques nÃ©cessaires
target_link_libraries(adastra_unittests PRIVATE
    adastra
    softadastra
    Threads::Threads
    nlohmann_json::nlohmann_json
    gtest
    gtest_main
)

# Catch2 (optionnel)
if(ENABLE_CATCH2)
    target_link_libraries(adastra_unittests PRIVATE Catch2::Catch2WithMain)
endif()

# DÃ©claration du test pour CTest
add_test(NAME adastra_all_tests COMMAND adastra_unittests)
